import sys
import pytest
sys.path.append(".")
from dna import DNA
from pathlib import Path
from pytest import mark

''' Pytest fixture setup '''
@pytest.fixture
def default_kmer_len():
    default_kmer_len = 20
    return default_kmer_len


@pytest.fixture
def genome_ref_path():
    genome_ref_path = "/Users/latifa/GitHub/Phage-EnrichSeq/genomeCompare_module/"
    return genome_ref_path


@pytest.fixture
def genome():
    genome = ("GTCTCCGAGCGATCTATCCACGACCAATTTGACATGGGTGCGCCGTTTGT"
            "AAAGGCCGTGGACAAAGCAGAACCCCCGGCACCGAGGGGGGCCGGGGGCC"
            "TGTTGGCGTGACGCCGTTGCTGCGCTCTTGGGGGTAGACGCGTCTCTCAG")
    return genome

@pytest.fixture
def test_dna_obj(default_kmer_len, genome_ref_path):
    test_dna_obj = DNA("Blessica", genome_ref_path + "Blessica.fasta", default_kmer_len)
    return test_dna_obj


@pytest.fixture
def compare_dna_obj(default_kmer_len, genome_ref_path):
    compare_dna_obj = DNA("Ryadel", genome_ref_path + "Ryadel.fasta", default_kmer_len)
    return compare_dna_obj


def test_init(genome_ref_path, default_kmer_len):
    ''' Test constructor '''
    dna1 = DNA("D29", genome_ref_path + "D29.fasta", default_kmer_len)
    assert dna1.name == "D29"
    assert dna1.fasta_file == Path("/Users/latifa/GitHub/Phage-EnrichSeq/genomeCompare_module/D29.fasta")
    assert dna1.genome == ("TGCGGCCGAGCCATCCTGTACGGGTTTCCAAGCCGATCAGAAGCACGGGC"
                            "CGACGCTAGAGCGCCTCGCCCAGGCGCTGTGAGCCACCAGGAGCCACGAA"
                            "CTCGCGACCCACGGGGAGTTATACCCCCGGAATCGGCTACGGGCCATACA")
    assert dna1.kmers == ['TGCGGCCGAGCCATCCTGTA', 'GCGGCCGAGCCATCCTGTAC', 'CGGCCGAGCCATCCTGTACG', 'GGCCGAGCCATCCTGTACGG', 'GCCGAGCCATCCTGTACGGG', 'CCGAGCCATCCTGTACGGGT', 'CGAGCCATCCTGTACGGGTT', 'GAGCCATCCTGTACGGGTTT', 'AGCCATCCTGTACGGGTTTC', 'GCCATCCTGTACGGGTTTCC', 'CCATCCTGTACGGGTTTCCA', 'CATCCTGTACGGGTTTCCAA', 'ATCCTGTACGGGTTTCCAAG', 'TCCTGTACGGGTTTCCAAGC', 'CCTGTACGGGTTTCCAAGCC', 'CTGTACGGGTTTCCAAGCCG', 'TGTACGGGTTTCCAAGCCGA', 'GTACGGGTTTCCAAGCCGAT', 'TACGGGTTTCCAAGCCGATC', 'ACGGGTTTCCAAGCCGATCA', 'CGGGTTTCCAAGCCGATCAG', 'GGGTTTCCAAGCCGATCAGA', 'GGTTTCCAAGCCGATCAGAA', 'GTTTCCAAGCCGATCAGAAG', 'TTTCCAAGCCGATCAGAAGC', 'TTCCAAGCCGATCAGAAGCA', 'TCCAAGCCGATCAGAAGCAC', 'CCAAGCCGATCAGAAGCACG', 'CAAGCCGATCAGAAGCACGG', 'AAGCCGATCAGAAGCACGGG', 'AGCCGATCAGAAGCACGGGC', 'GCCGATCAGAAGCACGGGCC', 'CCGATCAGAAGCACGGGCCG', 'CGATCAGAAGCACGGGCCGA', 'GATCAGAAGCACGGGCCGAC', 'ATCAGAAGCACGGGCCGACG', 'TCAGAAGCACGGGCCGACGC', 'CAGAAGCACGGGCCGACGCT', 'AGAAGCACGGGCCGACGCTA', 'GAAGCACGGGCCGACGCTAG', 'AAGCACGGGCCGACGCTAGA', 'AGCACGGGCCGACGCTAGAG', 'GCACGGGCCGACGCTAGAGC', 'CACGGGCCGACGCTAGAGCG', 'ACGGGCCGACGCTAGAGCGC', 'CGGGCCGACGCTAGAGCGCC', 'GGGCCGACGCTAGAGCGCCT', 'GGCCGACGCTAGAGCGCCTC', 'GCCGACGCTAGAGCGCCTCG', 'CCGACGCTAGAGCGCCTCGC', 'CGACGCTAGAGCGCCTCGCC', 'GACGCTAGAGCGCCTCGCCC', 'ACGCTAGAGCGCCTCGCCCA', 'CGCTAGAGCGCCTCGCCCAG', 'GCTAGAGCGCCTCGCCCAGG', 'CTAGAGCGCCTCGCCCAGGC', 'TAGAGCGCCTCGCCCAGGCG', 'AGAGCGCCTCGCCCAGGCGC', 'GAGCGCCTCGCCCAGGCGCT', 'AGCGCCTCGCCCAGGCGCTG', 'GCGCCTCGCCCAGGCGCTGT', 'CGCCTCGCCCAGGCGCTGTG', 'GCCTCGCCCAGGCGCTGTGA', 'CCTCGCCCAGGCGCTGTGAG', 'CTCGCCCAGGCGCTGTGAGC', 'TCGCCCAGGCGCTGTGAGCC', 'CGCCCAGGCGCTGTGAGCCA', 'GCCCAGGCGCTGTGAGCCAC', 'CCCAGGCGCTGTGAGCCACC', 'CCAGGCGCTGTGAGCCACCA', 'CAGGCGCTGTGAGCCACCAG', 'AGGCGCTGTGAGCCACCAGG', 'GGCGCTGTGAGCCACCAGGA', 'GCGCTGTGAGCCACCAGGAG', 'CGCTGTGAGCCACCAGGAGC', 'GCTGTGAGCCACCAGGAGCC', 'CTGTGAGCCACCAGGAGCCA', 'TGTGAGCCACCAGGAGCCAC', 'GTGAGCCACCAGGAGCCACG', 'TGAGCCACCAGGAGCCACGA', 'GAGCCACCAGGAGCCACGAA', 'AGCCACCAGGAGCCACGAAC', 'GCCACCAGGAGCCACGAACT', 'CCACCAGGAGCCACGAACTC', 'CACCAGGAGCCACGAACTCG', 'ACCAGGAGCCACGAACTCGC', 'CCAGGAGCCACGAACTCGCG', 'CAGGAGCCACGAACTCGCGA', 'AGGAGCCACGAACTCGCGAC', 'GGAGCCACGAACTCGCGACC', 'GAGCCACGAACTCGCGACCC', 'AGCCACGAACTCGCGACCCA', 'GCCACGAACTCGCGACCCAC', 'CCACGAACTCGCGACCCACG', 'CACGAACTCGCGACCCACGG', 'ACGAACTCGCGACCCACGGG', 'CGAACTCGCGACCCACGGGG', 'GAACTCGCGACCCACGGGGA', 'AACTCGCGACCCACGGGGAG', 'ACTCGCGACCCACGGGGAGT', 'CTCGCGACCCACGGGGAGTT', 'TCGCGACCCACGGGGAGTTA', 'CGCGACCCACGGGGAGTTAT', 'GCGACCCACGGGGAGTTATA', 'CGACCCACGGGGAGTTATAC', 'GACCCACGGGGAGTTATACC', 'ACCCACGGGGAGTTATACCC', 'CCCACGGGGAGTTATACCCC', 'CCACGGGGAGTTATACCCCC', 'CACGGGGAGTTATACCCCCG', 'ACGGGGAGTTATACCCCCGG', 'CGGGGAGTTATACCCCCGGA', 'GGGGAGTTATACCCCCGGAA', 'GGGAGTTATACCCCCGGAAT', 'GGAGTTATACCCCCGGAATC', 'GAGTTATACCCCCGGAATCG', 'AGTTATACCCCCGGAATCGG', 'GTTATACCCCCGGAATCGGC', 'TTATACCCCCGGAATCGGCT', 'TATACCCCCGGAATCGGCTA', 'ATACCCCCGGAATCGGCTAC', 'TACCCCCGGAATCGGCTACG', 'ACCCCCGGAATCGGCTACGG', 'CCCCCGGAATCGGCTACGGG', 'CCCCGGAATCGGCTACGGGC', 'CCCGGAATCGGCTACGGGCC', 'CCGGAATCGGCTACGGGCCA', 'CGGAATCGGCTACGGGCCAT', 'GGAATCGGCTACGGGCCATA', 'GAATCGGCTACGGGCCATAC', 'AATCGGCTACGGGCCATACA']


def test_fasta_to_genome(test_dna_obj):
    ''' Test method that extracts a genome from a fasta file '''
    expected_genome = ("GTCTCCGAGCGATCTATCCACGACCAATTTGACATGGGTGCGCCGTTTGT"
                        "AAAGGCCGTGGACAAAGCAGAACCCCCGGCACCGAGGGGGGCCGGGGGCC"
                        "TGTTGGCGTGACGCCGTTGCTGCGCTCTTGGGGGTAGACGCGTCTCTCAG")
    actual_genome = test_dna_obj.fasta_to_genome(test_dna_obj.fasta_file)
    assert actual_genome == expected_genome


@pytest.mark.parametrize("kmer_len, expected",
                        [
                            (20, ['GTCTCCGAGCGATCTATCCA', 'TCTCCGAGCGATCTATCCAC', 'CTCCGAGCGATCTATCCACG', 'TCCGAGCGATCTATCCACGA', 'CCGAGCGATCTATCCACGAC', 'CGAGCGATCTATCCACGACC', 'GAGCGATCTATCCACGACCA', 'AGCGATCTATCCACGACCAA', 'GCGATCTATCCACGACCAAT', 'CGATCTATCCACGACCAATT', 'GATCTATCCACGACCAATTT', 'ATCTATCCACGACCAATTTG', 'TCTATCCACGACCAATTTGA', 'CTATCCACGACCAATTTGAC', 'TATCCACGACCAATTTGACA', 'ATCCACGACCAATTTGACAT', 'TCCACGACCAATTTGACATG', 'CCACGACCAATTTGACATGG', 'CACGACCAATTTGACATGGG', 'ACGACCAATTTGACATGGGT', 'CGACCAATTTGACATGGGTG', 'GACCAATTTGACATGGGTGC', 'ACCAATTTGACATGGGTGCG', 'CCAATTTGACATGGGTGCGC', 'CAATTTGACATGGGTGCGCC', 'AATTTGACATGGGTGCGCCG', 'ATTTGACATGGGTGCGCCGT', 'TTTGACATGGGTGCGCCGTT', 'TTGACATGGGTGCGCCGTTT', 'TGACATGGGTGCGCCGTTTG', 'GACATGGGTGCGCCGTTTGT', 'ACATGGGTGCGCCGTTTGTA', 'CATGGGTGCGCCGTTTGTAA', 'ATGGGTGCGCCGTTTGTAAA', 'TGGGTGCGCCGTTTGTAAAG', 'GGGTGCGCCGTTTGTAAAGG', 'GGTGCGCCGTTTGTAAAGGC', 'GTGCGCCGTTTGTAAAGGCC', 'TGCGCCGTTTGTAAAGGCCG', 'GCGCCGTTTGTAAAGGCCGT', 'CGCCGTTTGTAAAGGCCGTG', 'GCCGTTTGTAAAGGCCGTGG', 'CCGTTTGTAAAGGCCGTGGA', 'CGTTTGTAAAGGCCGTGGAC', 'GTTTGTAAAGGCCGTGGACA', 'TTTGTAAAGGCCGTGGACAA', 'TTGTAAAGGCCGTGGACAAA', 'TGTAAAGGCCGTGGACAAAG', 'GTAAAGGCCGTGGACAAAGC', 'TAAAGGCCGTGGACAAAGCA', 'AAAGGCCGTGGACAAAGCAG', 'AAGGCCGTGGACAAAGCAGA', 'AGGCCGTGGACAAAGCAGAA', 'GGCCGTGGACAAAGCAGAAC', 'GCCGTGGACAAAGCAGAACC', 'CCGTGGACAAAGCAGAACCC', 'CGTGGACAAAGCAGAACCCC', 'GTGGACAAAGCAGAACCCCC', 'TGGACAAAGCAGAACCCCCG', 'GGACAAAGCAGAACCCCCGG', 'GACAAAGCAGAACCCCCGGC', 'ACAAAGCAGAACCCCCGGCA', 'CAAAGCAGAACCCCCGGCAC', 'AAAGCAGAACCCCCGGCACC', 'AAGCAGAACCCCCGGCACCG', 'AGCAGAACCCCCGGCACCGA', 'GCAGAACCCCCGGCACCGAG', 'CAGAACCCCCGGCACCGAGG', 'AGAACCCCCGGCACCGAGGG', 'GAACCCCCGGCACCGAGGGG', 'AACCCCCGGCACCGAGGGGG', 'ACCCCCGGCACCGAGGGGGG', 'CCCCCGGCACCGAGGGGGGC', 'CCCCGGCACCGAGGGGGGCC', 'CCCGGCACCGAGGGGGGCCG', 'CCGGCACCGAGGGGGGCCGG', 'CGGCACCGAGGGGGGCCGGG', 'GGCACCGAGGGGGGCCGGGG', 'GCACCGAGGGGGGCCGGGGG', 'CACCGAGGGGGGCCGGGGGC', 'ACCGAGGGGGGCCGGGGGCC', 'CCGAGGGGGGCCGGGGGCCT', 'CGAGGGGGGCCGGGGGCCTG', 'GAGGGGGGCCGGGGGCCTGT', 'AGGGGGGCCGGGGGCCTGTT', 'GGGGGGCCGGGGGCCTGTTG', 'GGGGGCCGGGGGCCTGTTGG', 'GGGGCCGGGGGCCTGTTGGC', 'GGGCCGGGGGCCTGTTGGCG', 'GGCCGGGGGCCTGTTGGCGT', 'GCCGGGGGCCTGTTGGCGTG', 'CCGGGGGCCTGTTGGCGTGA', 'CGGGGGCCTGTTGGCGTGAC', 'GGGGGCCTGTTGGCGTGACG', 'GGGGCCTGTTGGCGTGACGC', 'GGGCCTGTTGGCGTGACGCC', 'GGCCTGTTGGCGTGACGCCG', 'GCCTGTTGGCGTGACGCCGT', 'CCTGTTGGCGTGACGCCGTT', 'CTGTTGGCGTGACGCCGTTG', 'TGTTGGCGTGACGCCGTTGC', 'GTTGGCGTGACGCCGTTGCT', 'TTGGCGTGACGCCGTTGCTG', 'TGGCGTGACGCCGTTGCTGC', 'GGCGTGACGCCGTTGCTGCG', 'GCGTGACGCCGTTGCTGCGC', 'CGTGACGCCGTTGCTGCGCT', 'GTGACGCCGTTGCTGCGCTC', 'TGACGCCGTTGCTGCGCTCT', 'GACGCCGTTGCTGCGCTCTT', 'ACGCCGTTGCTGCGCTCTTG', 'CGCCGTTGCTGCGCTCTTGG', 'GCCGTTGCTGCGCTCTTGGG', 'CCGTTGCTGCGCTCTTGGGG', 'CGTTGCTGCGCTCTTGGGGG', 'GTTGCTGCGCTCTTGGGGGT', 'TTGCTGCGCTCTTGGGGGTA', 'TGCTGCGCTCTTGGGGGTAG', 'GCTGCGCTCTTGGGGGTAGA', 'CTGCGCTCTTGGGGGTAGAC', 'TGCGCTCTTGGGGGTAGACG', 'GCGCTCTTGGGGGTAGACGC', 'CGCTCTTGGGGGTAGACGCG', 'GCTCTTGGGGGTAGACGCGT', 'CTCTTGGGGGTAGACGCGTC', 'TCTTGGGGGTAGACGCGTCT', 'CTTGGGGGTAGACGCGTCTC', 'TTGGGGGTAGACGCGTCTCT', 'TGGGGGTAGACGCGTCTCTC', 'GGGGGTAGACGCGTCTCTCA', 'GGGGTAGACGCGTCTCTCAG']),
                            (500, ["GTCTCCGAGCGATCTATCCACGACCAATTTGACATGGGTGCGCCGTTTGTAAAGGCCGTGGACAAAGCAGAACCCCCGGCACCGAGGGGGGCCGGGGGCCTGTTGGCGTGACGCCGTTGCTGCGCTCTTGGGGGTAGACGCGTCTCTCAG"]),
                            (-4, ["GTCTCCGAGCGATCTATCCACGACCAATTTGACATGGGTGCGCCGTTTGTAAAGGCCGTGGACAAAGCAGAACCCCCGGCACCGAGGGGGGCCGGGGGCCTGTTGGCGTGACGCCGTTGCTGCGCTCTTGGGGGTAGACGCGTCTCTCAG"])
                        ])
def test_create_kmers(kmer_len, expected, test_dna_obj):
    ''' Test kmer generation method '''
    actual = test_dna_obj.create_kmers(test_dna_obj.genome, kmer_len)
    assert actual == expected


@pytest.mark.parametrize("file, expected", 
                        [
                            ("D29.fa", True), 
                            ("badfile.xml", False), 
                            ("blessica", False), 
                            (Path("blessica.fasta"), True)])
def test_validate_file_extension(file, expected, test_dna_obj):
    actual = test_dna_obj.validate_file_extension(file)
    assert actual == expected


def test_calc_jaccard(test_dna_obj, compare_dna_obj):
    ''' Test jaccard calculation '''
    # EXPECTED JACCARD VALUE SETUP
    set1 = set(test_dna_obj.kmers) # Blessica
    set2 = set(compare_dna_obj.kmers) # Ryadel
    intersection = len(set1.intersection(set2))
    union = len(set1.union(set2))
    expected_jaccard_val = round(intersection / union, 8)

    assert test_dna_obj.calc_jaccard(compare_dna_obj) == expected_jaccard_val

@mark.notimplemented
def test_calc_minhash(test_dna_obj):
    assert test_dna_obj.calc_minash() == 0


@mark.notwritten
def test_compare_results(test_dna_obj):
    assert test_dna_obj.compare_results(1,1)